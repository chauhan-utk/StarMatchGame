{"version":3,"sources":["utils.js","index.js"],"names":["colors","available","used","wrong","candidate","numStatus","utils","sum","arr","reduce","acc","curr","range","min","max","Array","from","length","_","i","random","Math","floor","randomSumIn","sets","sums","j","len","candidateSet","concat","candidateSum","push","StarsDisplay","props","react_default","a","createElement","Fragment","count","map","starId","key","className","PlayNumber","style","background","status","onClick","number","PlayAgain","color","gameStatus","lost","won","active","Game","_useGameState","_useState","useState","_useState2","Object","slicedToArray","stars","setStars","_useState3","_useState4","availableNums","setAvailableNums","_useState5","_useState6","candidateNums","setCandidateNums","_useState7","_useState8","secondsLeft","setSecondsLeft","React","useEffect","timerId","setTimeout","clearTimeout","setGameState","newCandidateNums","newAvailableNums","filter","n","includes","useGameState","currentGameStatus","getNumberStatus","onNumClick","currentStatus","src_PlayAgain","startNewGame","src_StarsDisplay","src_PlayNumber","rootElement","document","getElementById","ReactDOM","render","_useState9","_useState10","gameId","setGameId","src_Game"],"mappings":"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","file":"static/js/main.4fa2dc80.chunk.js","sourcesContent":["// Color Theme\r\nexport const colors = {\r\n  available: \"lightgray\",\r\n  used: \"lightgreen\",\r\n  wrong: \"lightcoral\",\r\n  candidate: \"deepskyblue\"\r\n};\r\n\r\nexport const numStatus = {\r\n  available: \"available\",\r\n  used: \"used\",\r\n  wrong: \"wrong\",\r\n  candidate: \"candidate\"\r\n};\r\n\r\n// Math science\r\nexport const utils = {\r\n  // Sum an array\r\n  sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\r\n\r\n  // create an array of numbers between min and max (edges included)\r\n  range: (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i),\r\n\r\n  // pick a random number between min and max (edges included)\r\n  random: (min, max) => min + Math.floor(max * Math.random()),\r\n\r\n  // Given an array of numbers and a max...\r\n  // Pick a random sum (< max) from the set of all available sums in arr\r\n  randomSumIn: (arr, max) => {\r\n    const sets = [[]];\r\n    const sums = [];\r\n    for (let i = 0; i < arr.length; i++) {\r\n      for (let j = 0, len = sets.length; j < len; j++) {\r\n        const candidateSet = sets[j].concat(arr[i]);\r\n        const candidateSum = utils.sum(candidateSet);\r\n        if (candidateSum <= max) {\r\n          sets.push(candidateSet);\r\n          sums.push(candidateSum);\r\n        }\r\n      }\r\n    }\r\n    return sums[utils.random(0, sums.length)];\r\n  }\r\n};\r\n","import React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { colors, numStatus, utils } from \"./utils\";\r\n\r\nimport \"./styles.css\";\r\n\r\nconst StarsDisplay = props => (\r\n  // using something in React Fragment\r\n  <>\r\n    {utils.range(1, props.count).map(starId => (\r\n      <div key={starId} className=\"star\" />\r\n    ))}\r\n  </>\r\n);\r\n\r\nconst PlayNumber = props => (\r\n  <button\r\n    className=\"number\"\r\n    style={{ background: colors[props.status] }}\r\n    onClick={() => props.onClick(props.number, props.status)}\r\n  >\r\n    {props.number}\r\n  </button>\r\n);\r\n\r\nconst PlayAgain = props => (\r\n  <div className=\"game-done\">\r\n    <div\r\n      className=\"message\"\r\n      style={{ color: props.status === gameStatus.lost ? \"red\" : \"green\" }}\r\n    >\r\n      {props.status === gameStatus.lost ? \"Game Over\" : \"Nice\"}\r\n    </div>\r\n    <button onClick={props.onClick}>Play Again</button>\r\n  </div>\r\n);\r\n\r\nconst gameStatus = {\r\n  won: \"won\",\r\n  lost: \"lost\",\r\n  active: \"active\"\r\n};\r\n\r\n// custom hook\r\nconst useGameState = () => {\r\n  // use react hooks to get state variable\r\n  const [stars, setStars] = useState(utils.random(1, 9));\r\n  const [availableNums, setAvailableNums] = useState(utils.range(1, 9));\r\n  const [candidateNums, setCandidateNums] = useState([]);\r\n  const [secondsLeft, setSecondsLeft] = useState(10);\r\n\r\n  React.useEffect(() => {\r\n    if (secondsLeft > 0 && availableNums.length > 0) {\r\n      const timerId = setTimeout(() => {\r\n        setSecondsLeft(secondsLeft - 1);\r\n      }, 1000);\r\n      return () => clearTimeout(timerId);\r\n    }\r\n  });\r\n\r\n  const setGameState = newCandidateNums => {\r\n    if (utils.sum(newCandidateNums) !== stars) {\r\n      setCandidateNums(newCandidateNums);\r\n    } else {\r\n      const newAvailableNums = availableNums.filter(\r\n        n => !newCandidateNums.includes(n)\r\n      );\r\n      setStars(utils.randomSumIn(newAvailableNums, 9));\r\n      setAvailableNums(newAvailableNums);\r\n      setCandidateNums([]);\r\n    }\r\n  };\r\n\r\n  return { stars, availableNums, candidateNums, secondsLeft, setGameState };\r\n};\r\n\r\nconst Game = props => {\r\n  const {\r\n    stars,\r\n    availableNums,\r\n    candidateNums,\r\n    secondsLeft,\r\n    setGameState\r\n  } = useGameState();\r\n\r\n  const areCandidatesCorrect = () => {\r\n    return utils.sum(candidateNums) <= stars;\r\n  };\r\n\r\n  const currentGameStatus =\r\n    availableNums.length === 0\r\n      ? gameStatus.won\r\n      : secondsLeft === 0\r\n      ? gameStatus.lost\r\n      : gameStatus.active;\r\n\r\n  // const resetGame = () => {\r\n  //   setStars(utils.random(1, 9));\r\n  //   setAvailableNums(utils.range(1, 9));\r\n  //   setCandidateNums([]);\r\n  // };\r\n\r\n  const getNumberStatus = number => {\r\n    if (!availableNums.includes(number)) {\r\n      return numStatus.used;\r\n    }\r\n    if (candidateNums.includes(number)) {\r\n      return areCandidatesCorrect() ? numStatus.candidate : numStatus.wrong;\r\n    }\r\n    return numStatus.available;\r\n  };\r\n\r\n  const onNumClick = (number, currentStatus) => {\r\n    // currentStatus => newStatus\r\n    if (\r\n      currentGameStatus !== gameStatus.active ||\r\n      currentStatus === numStatus.used\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const newCandidateNums =\r\n      currentStatus === numStatus.available\r\n        ? candidateNums.concat(number)\r\n        : candidateNums.filter(n => n !== number);\r\n\r\n    setGameState(newCandidateNums);\r\n  };\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"help\">\r\n        Pick 1 or more numbers that sum to the number of stars\r\n      </div>\r\n      <div className=\"body\">\r\n        <div className=\"left\">\r\n          {currentGameStatus !== gameStatus.active ? (\r\n            <PlayAgain\r\n              onClick={props.startNewGame}\r\n              status={currentGameStatus}\r\n            />\r\n          ) : (\r\n            <StarsDisplay count={stars} />\r\n          )}\r\n        </div>\r\n        <div className=\"right\">\r\n          {utils.range(1, 9).map(number => (\r\n            <PlayNumber\r\n              key={number}\r\n              number={number}\r\n              status={getNumberStatus(number)}\r\n              onClick={onNumClick}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <div className=\"timer\">Time Remaining: {secondsLeft}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst StarMatch = () => {\r\n  const [gameId, setGameId] = useState(1);\r\n  return <Game key={gameId} startNewGame={() => setGameId(gameId + 1)} />;\r\n};\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<StarMatch />, rootElement);\r\n"],"sourceRoot":""}